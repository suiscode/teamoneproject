// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum SteeringType {
  MANUAL
  AUTO
}

model User {
  name                  String?
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  phoneNumber           String?
  firstName             String?
  lastName              String?
  address               String?
  role                  UserRole               @default(USER)
  reviews               Review[]
  orders                Order[]
  accounts              Account[]
  bookmarks             Bookmark[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Order {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  user           User   @relation(fields: [userId], references: [id])
  duration       Json
  pickupLocation String
  dropLocation   String
  amount         Float
  car            Car    @relation(fields: [carId], references: [id])

  // Foreign keys
  userId String @db.ObjectId
  carId  String @db.ObjectId
}

model CarCategory {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  cars Car[]
}

model Car {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  type        String
  img         String[]
  price       Float
  salePrice   Float?
  gasoline    Float
  steering    SteeringType
  capacity    Int
  bookmarks   Bookmark[]
  category    CarCategory? @relation(fields: [categoryId], references: [id])
  reviews     Review[] // Added relation to reviews

  // Foreign key
  categoryId String? @db.ObjectId
  Order      Order[]

  @@unique([name])
}

model Bookmark {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  user User   @relation(fields: [userId], references: [id])
  car  Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  // Foreign keys
  userId String @db.ObjectId
  carId  String @db.ObjectId

  @@unique([userId, carId])
}

model Review {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  car        Car     @relation(fields: [carId], references: [id])
  starRating Int
  comment    String?

  // Foreign key
  carId  String  @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//// ADD BOOK MARK DO IT IT IT ////
